{"version":3,"file":"component---src-pages-index-js-32dbfc810508b2288c6e.js","mappings":"uJAwDA,IA9CYA,KAAO,IAADC,EAAAC,EAChB,MAAMC,GAAOC,EAAAA,EAAAA,gBAAe,aAiBtBC,EAA+B,QAAzBJ,EAAGE,EAAKG,KAAKC,oBAAY,IAAAN,OAAA,EAAtBA,EAAwBI,OACjCG,EAA+B,QAAzBN,EAAGC,EAAKG,KAAKC,oBAAY,IAAAL,OAAA,EAAtBA,EAAwBM,OACjCC,EAAiBD,aAAM,EAANA,EAAQE,OAE/B,OACEC,EAAAA,cAAA,OAAKC,UAAU,OACZH,GACCE,EAAAA,cAAA,OACEC,UAAU,aACVC,IAAG,sBAAwBJ,EAAc,OACzCK,MAAO,GACPC,OAAQ,GACRC,IAAI,oBAGPX,aAAM,EAANA,EAAQY,OACPN,EAAAA,cAAA,SAAG,cACWN,EAAOY,KAAMZ,SAAAA,EAAQa,QAAO,KAAQb,EAAOa,QAAY,KACnEP,EAAAA,cAAA,WACCF,GACCE,EAAAA,cAAAA,EAAAA,SAAA,KAAE,WAAQA,EAAAA,cAAA,KAAGQ,KAAI,sBAAwBV,GAAmBA,KAI9D,C,oFCaV,UA1DkBW,IAAwB,IAAAnB,EAAA,IAAvB,KAAEE,EAAI,SAAEkB,GAAUD,EACnC,MAAME,GAAkC,QAAtBrB,EAAAE,EAAKG,KAAKC,oBAAY,IAAAN,OAAA,EAAtBA,EAAwBsB,QAAK,QACzCC,EAAQrB,EAAKsB,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAENhB,EAAAA,cAACiB,EAAAA,EAAM,CAACP,SAAUA,EAAUE,MAAOD,GACjCX,EAAAA,cAACkB,EAAAA,EAAG,CAACN,MAAM,cACXZ,EAAAA,cAACX,EAAAA,EAAG,MACJW,EAAAA,cAAA,SAAG,8JAUPA,EAAAA,cAACiB,EAAAA,EAAM,CAACP,SAAUA,EAAUE,MAAOD,GACjCX,EAAAA,cAACkB,EAAAA,EAAG,CAACN,MAAM,cACXZ,EAAAA,cAACX,EAAAA,EAAG,MACJW,EAAAA,cAAA,MAAImB,MAAO,CAAEC,UAAW,SACrBP,EAAMQ,KAAIC,IACT,MAAMV,EAAQU,EAAKC,YAAYX,OAASU,EAAKE,OAAOC,KAEpD,OACEzB,EAAAA,cAAA,MAAI0B,IAAKJ,EAAKE,OAAOC,MACnBzB,EAAAA,cAAA,WACEC,UAAU,iBACV0B,WAAS,EACTC,SAAS,6BAET5B,EAAAA,cAAA,cACEA,EAAAA,cAAA,UACEA,EAAAA,cAAC6B,EAAAA,KAAI,CAACC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC/B,EAAAA,cAAA,QAAM+B,SAAS,YAAYnB,KAG/BZ,EAAAA,cAAA,aAAQsB,EAAKC,YAAYS,OAE3BhC,EAAAA,cAAA,eACEA,EAAAA,cAAA,KACEiC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS,kBAIZ,KAIJ,C","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            github\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n  const githubUsername = social?.github\n\n  return (\n    <div className=\"bio\">\n      {githubUsername && (\n        <img\n          className=\"bio-avatar\"\n          src={`https://github.com/${githubUsername}.png`}\n          width={50}\n          height={50}\n          alt=\"GitHub profile\"\n        />\n      )}\n      {author?.name && (\n        <p>\n          Written by {author.name}{author?.summary ? `, ${author.summary}` : null}\n          <br/>\n          {githubUsername && (\n            <>GitHub: <a href={`https://github.com/${githubUsername}`}>{githubUsername}</a></>\n          )}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: {}\n      sort: {\n        frontmatter: {\n          date: DESC\n        }\n      }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["Bio","_data$site$siteMetada","_data$site$siteMetada2","data","useStaticQuery","author","site","siteMetadata","social","githubUsername","github","React","className","src","width","height","alt","name","summary","href","_ref","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","Layout","Seo","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}